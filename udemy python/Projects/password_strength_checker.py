import string
import random
import getpass


def password_strength_checker(password):
    issues = []
    if len(password) < 8:
        issues.append("Password must be at least 8 characters long.")
    if not any(character.islower() for character in password):                      # any() does one thing that iteratable inside it has any return value is true it gives true as output for whole array/list or iteratable
        issues.append("Password should contain a lower character")
    if not any(character.isupper() for character in password):     
        issues.append("Password should contain a upper character")
    if not any(character.isdigit() for character in password):     
        issues.append("Password should contain a number")
    if not any(character in string.punctuation for character in password):     
        issues.append("Password should contain a special letter")
    return issues

def generate_strong_password(length):
    random_pass = string.ascii_letters + string.digits +  string.punctuation
    return "".join(random.choice(random_pass) for _ in range(length))                # here the join is actually consuming the values so no generator error

# def memorable_password(length):
#     def special_characters():
#         # return random.choice(string.punctuation for _ in range(2))               # it will give error because we are not consuming the values generated by the generator
#         # return "".join(random.choice(string.punctuation for _ in range(2)))      # Here is one more error in the for loop the loop is a generator expression loop it throws the value away and do not report the length of it so it cannot determine the range(2)
#         return "".join(random.choice(string.punctuation, k=2))      
    
#     def normal_letter(length):
#         return "".join(random.choice(string.punctuation for _ in range(length)))
        
#     special_final_letter = special_characters()
#     normal_final_letter = normal_letter(length)
#     result = special_final_letter + normal_final_letter
#     return result

# -------------------  Above code is for learning -------------------
def memorable_password(length):
    special_chars = [random.choice(string.punctuation) for _ in range(2)]
    remaining_length = length - 2
    normal_chars = [random.choice(string.ascii_letters) for _ in range(remaining_length)]
    
    sum = special_chars + normal_chars
    random.shuffle(sum)
    result = "".join(sum)
    return result


password = getpass.getpass("Enter a password:")
issues = password_strength_checker(password)

if not issues:
    print("You have a strong password!")

else:
    print("You got weak password!")
    for issue in issues:
        print(f"- {issue}")

concent = input("Do you want to let me suggest a strong password:(y/n)").lower().strip()
if concent == "y":
    length_by_user = int(input("What should be the length of password(length > 12)"))
    type_by_user = str(input("What should be memorable or strong(m/s):")).lower()
    if type_by_user == "s":
        suggestion = generate_strong_password(length_by_user)
    if type_by_user == "m":
        suggestion = memorable_password(length_by_user)
    else:
        print("Please provide correct type!")
        # exit()

    print("\n Suggesting you a strong password")
    print(f"\n {suggestion}")
else:
    print("try again with strong password.")
        
